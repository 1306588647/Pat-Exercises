import java.math.BigDecimal;
import java.math.BigInteger;
/*
黄金分割数0.61803... 是个无理数，这个常数十分重要，在许多工程问题中会出现。有时需要把这个数字求得很精确。

对于某些精密工程，常数的精度很重要。也许你听说过哈勃太空望远镜，它首次升空后就发现了一处人工加工错误，对那样一个庞然大物，其实只是镜面加工时有比头发丝还细许多倍的一处错误而已，却使它成了“近视眼”!!


言归正传，我们如何求得黄金分割数的尽可能精确的值呢？有许多方法。

比较简单的一种是用连分数：

              1
黄金数 = ---------------------
                    1
         1 + -----------------
                      1
             1 + -------------
                        1
                 1 + ---------
                      1 + ...



这个连分数计算的“层数”越多，它的值越接近黄金分割数。

请你利用这一特性，求出黄金分割数的足够精确值，要求四舍五入到小数点后100位。

小数点后3位的值为：0.618
小数点后4位的值为：0.6180
小数点后5位的值为：0.61803
小数点后7位的值为：0.6180340

*/
/*
   题目就是考察斐波那契数列
   1 1 2 3 5 8 13 21....
   以及BigInteger类以及BigDecimal类

*/
public class Demo {
    public static void main(String[] args) {
        BigInteger a = new BigInteger("1");
        BigInteger b = new BigInteger("1");
        for (int i = 0; i < 500; i++) {
            BigInteger temp = b;
            b=a.add(b);
            a=temp;
        }
        BigDecimal result = new BigDecimal(a,120).divide(new BigDecimal(b,120),BigDecimal.ROUND_HALF_UP);//ROUND_HALF_UP四舍五入
        ////截取字符串
        System.out.println(result.toString().substring(0,103));
        //0.61803398874989484820458683436563811772030917980576286213544862270526046281890244970720720418939113748
        //结果应该为四舍五入
        //0.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911375


    }


}

